#!/usr/bin/env bash

## Synopsis: Run jobs in a systemd process-container (identified by EXECUTOR_NUMBER).
##
## usage: sudo slotdo run <NUMBER> <SCRIPT>
## usage: sudo slotdo kill <NUMBER>
## example: sudo slotdo run 2 /tmp/my-job.sh
## example: sudo slotdo kill 2
##
## Motivation: Generally, Jenkins is responsible for ensuring that we only have one
## on-going task for each `EXECUTOR_NUMBER`. This requires calling some kind
## of reaper between tasks. Unfortunately, the Jenkins' implementation
## (ProcessTaskKiller) doesn't cope well with things like sudo/unshare/homerdo.
##
## Systemd has better cleanup. While its best known for system-services, it
## also includes a utility (`systemd-run`) which we can use for transient
## jobs in named/numbered slots. "slotdo" allows us to grant limited
## access for "dispatcher" to use "systemd-run".
##
## Each work-slot has a name like "dispatcher_0", "dispatcher_1", etc.
## We will ensure that the slot is clean before starting new work.

{
  set -e

  ############################################
  ## Constants
  SELF="$(realpath "$0")"
  DISPATCH_USER="dispatcher"                 ## User who submits+executes tasks
  GUARD=                                     ## Optional filter on key commands; for dry-runs

  ## Dynamic values
  action=
  slot_number=                               ## 0, 1, 2, ...
  script=                                    ## Path to the bash script
  unit=                                      ## Named of the systemd-unit for our slot

  ############################################

  function do_run() {
    script="$1"
    if [ ! -f "$script" ]; then
      fatal "Invalid script file"
    fi

    ## Make sure the slot is clean before we start work
    do_kill

    ## Send the job
    print_note "Send job $script to $unit"
    $GUARD systemd-run --pty --unit="$unit" --uid="$DISPATCH_USER" --pipe --same-dir bash "$script"
    exit $?
  }

  function do_kill() {
    if [ -z "$unit" ]; then
      return
    fi

    if systemctl is-active "$unit"; then
      print_note "Found active unit ($unit). Killing."
      $GUARD systemctl kill "$unit"
    fi

    # print_note "Resetting ($unit)..."
    set +e
      systemctl reset-failed "$unit"
      print_note "Reset ($unit => $?)"
    set -e

    for n in `seq 1 10` ; do
      if ! service_exists "$unit" ; then
        print_note "Unit name ($unit) is clear."
        break
      fi
      sleep 1
    done
  }

  function assert_valid_slot_number() {
    if ! [[ $slot_number =~ ^[0-9]+$ ]] ; then
      fatal "Missing slot number"
    fi
  }

  function print_note() {
    echo >&2 "[slotdo] $@"
  }

  function fatal {
    echo "$@" >&2
    echo
    local prog=$(basename "$0")
    echo "usage: $prog run <SLOT> <SCRIPT>"
    echo "       $prog kill <SLOT>"
    exit 1
  }

  function service_exists() {
    local n=$1
    if [[ $(systemctl list-units --all -t service --full --no-legend "$n.service" | sed 's/^\s*//g' | cut -f1 -d' ') == $n.service ]]; then
        #print_note "$n exists"
        return 0
    else
        #print_note "$n does not exist"
        return 1
    fi
  }

  ############################################

  action="$1" ; shift
  slot_number="$1" ; assert_valid_slot_number ; shift
  unit="dispatch_${slot_number}"

  case "$action" in
    run) do_run "$@" ; ;;
    kill) do_kill ; ;;
    *) fatal "Unrecognized action" ; ;;
  esac
}
