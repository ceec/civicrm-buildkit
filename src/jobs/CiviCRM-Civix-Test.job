#!/usr/bin/env bash
set -e

## Example usage:
##
## $ env CIVIVER=master BLDTYPE=drupal-clean SUITE=make-snapshots run-bknix-job --mock min CiviCRM-Civix-Test
## $ env CIVIVER=master BLDTYPE=drupal-clean SUITE=make-snapshots PATCH=https://github.com/totten/civix/pull/340 run-bknix-job --mock min CiviCRM-Civix-Test


#################################################
## Environment variables

## EXECUTOR_NUMBER: The number of this concurrent process
## WORKSPACE: The path where Jenkins stores data for this job
## BLDTYPE: The type of civibuild site to create (e.g. `drupal-clean` or `wp-demo`)
## CIVIVER: The version of CiviCRM to install, expressed as a branch or tag (e.g. `master`, `5.59`, `5.57.0`)
assert_common EXECUTOR_NUMBER WORKSPACE BLDTYPE CIVIVER

## SUITE: The kind of civix test to run (e.g. `make-snapshots`, `run-tests`, or 'all')
assert_common SUITE

## PATCH: Optional. URL of a pending pull-request in any `civicrm-*` repo (e.g. `https://github.com/civicrm/civicrm-packages/pull/1234`)
assert_regex '^\(\|https://github.com/civicrm/civicrm-[a-z]*/pull/[0-9]\+/*\|https://github.com/totten/civix/pull/[0-9]\+/*\)$' "$PATCH" "Invalid PATCH"

## CIVIX_TYPE: Whether to test basic repo or to compile PHAR.
## (This may only matter for 'make-snapshots' testing.)
CIVIX_TYPE=${CIVIX_TYPE:-src}
assert_regex '^\(src\|phar\)$' "$CIVIX_TYPE" "Invalid CIVIX_TYPE"

#################################################
## Main

assert_bknix_temporary

################################################
## Setup environment
BLDNAME="build-$EXECUTOR_NUMBER"
export TIME_FUNC="linear:500"

## Reset (cleanup after previous tests)
clean_legacy_workspace "$WORKSPACE/junit" "$WORKSPACE/civibuild-html" "$WORKSPACE/last-scan.json" "$WORKSPACE/new-scan.json"
init_std_workspace
if [ -d "$BKITBLD/$BLDNAME" ]; then
  echo y | civibuild destroy "$BLDNAME"
fi

## Report details about the test environment
civibuild env-info

## Work-around: These max+5.51 produces warnings due to core issues. Skip it.
if [ "$BKPROF-$CIVIVER" = "max-5.51" ]; then
  echo "The target version of civicrm-core ($CIVIVER) is not compatible with the environment ($BKPROF). Skipping."
  exit 0
fi

################################################
## Download application (with civibuild)
case "$CIVIVER" in
  5.51) civibuild download "$BLDNAME" --civi-ver "$CIVIVER" --type "$BLDTYPE" --patch "https://github.com/civicrm/civicrm-core/pull/23991" ; ;;
  *) civibuild download "$BLDNAME" --civi-ver "$CIVIVER" --type "$BLDTYPE" ; ;;
esac

## Install application (with civibuild)
civibuild install "$BLDNAME" \
  --admin-pass "n0ts3cr3t"

## Report details about this build of the application
civibuild show "$BLDNAME" \
  --html "$WORKSPACE_HTML" \
  --last-scan "$WORKSPACE_BUILD/last-scan.json" \
  --new-scan "$WORKSPACE_BUILD/new-scan.json"
cp "$WORKSPACE_BUILD/new-scan.json" "$WORKSPACE_BUILD/last-scan.json"

## Examine build
pushd "$BKITBLD/$BLDNAME"
  echo "Check for path"
  CIVIX_WORKSPACE=$(cv path -d '[civicrm.root]/ext/civixtest')
  export CIVIX_WORKSPACE
popd

echo ; echo; echo; echo "CIVIX_WORKSPACE=$CIVIX_WORKSPACE" ; echo; echo; echo

## Setup civix and run tests
mkdir -p "$BKITBLD/$BLDNAME/src"
git clone "https://github.com/totten/civix" "$BKITBLD/$BLDNAME/src/civix"
pushd "$BKITBLD/$BLDNAME/src/civix"
  if [ -n "$PATCH" ]; then
    echo "Apply patch ($PATCH)"
    git scan am -N "$PATCH"
  fi
popd
pushd "$BKITBLD/$BLDNAME/src/civix"
  composer install
  for suite in "$SUITE" ; do
    case "$suite" in
      all)
        ./scripts/make-snapshots.sh --"$CIVIX_TYPE" --version HEAD --test
        ./scripts/run-tests.sh --debug --log-junit "$WORKSPACE_JUNIT/civix-phpunit.xml"
        ;;
      make-snapshots)
        ./scripts/make-snapshots.sh --"$CIVIX_TYPE" --version HEAD --test
        ;;
      run-tests)
        # DEBUG=2
        ./scripts/run-tests.sh --debug --log-junit "$WORKSPACE_JUNIT/civix-phpunit.xml"
        ;;
    esac
  done
popd

exit $?
